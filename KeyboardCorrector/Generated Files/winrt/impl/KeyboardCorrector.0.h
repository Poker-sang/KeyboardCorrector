// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210806.1

#pragma once
#ifndef WINRT_KeyboardCorrector_0_H
#define WINRT_KeyboardCorrector_0_H
WINRT_EXPORT namespace winrt::Microsoft::UI::Xaml::Markup
{
    struct IXamlMetadataProvider;
}
WINRT_EXPORT namespace winrt::KeyboardCorrector
{
    struct IMainWindow;
    struct MainWindow;
    struct XamlMetaDataProvider;
}
namespace winrt::impl
{
    template <> struct category<winrt::KeyboardCorrector::IMainWindow>{ using type = interface_category; };
    template <> struct category<winrt::KeyboardCorrector::MainWindow>{ using type = class_category; };
    template <> struct category<winrt::KeyboardCorrector::XamlMetaDataProvider>{ using type = class_category; };
    template <> inline constexpr auto& name_v<winrt::KeyboardCorrector::MainWindow> = L"KeyboardCorrector.MainWindow";
    template <> inline constexpr auto& name_v<winrt::KeyboardCorrector::XamlMetaDataProvider> = L"KeyboardCorrector.XamlMetaDataProvider";
    template <> inline constexpr auto& name_v<winrt::KeyboardCorrector::IMainWindow> = L"KeyboardCorrector.IMainWindow";
    template <> inline constexpr guid guid_v<winrt::KeyboardCorrector::IMainWindow>{ 0x27F7CB0C,0x185D,0x5090,{ 0x8D,0x62,0x2F,0xEC,0x0F,0xCD,0xAF,0x26 } }; // 27F7CB0C-185D-5090-8D62-2FEC0FCDAF26
    template <> struct default_interface<winrt::KeyboardCorrector::MainWindow>{ using type = winrt::KeyboardCorrector::IMainWindow; };
    template <> struct default_interface<winrt::KeyboardCorrector::XamlMetaDataProvider>{ using type = winrt::Microsoft::UI::Xaml::Markup::IXamlMetadataProvider; };
    template <> struct abi<winrt::KeyboardCorrector::IMainWindow>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MyProperty(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MyProperty(int32_t) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_KeyboardCorrector_IMainWindow
    {
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) MyProperty() const;
        WINRT_IMPL_AUTO(void) MyProperty(int32_t value) const;
    };
    template <> struct consume<winrt::KeyboardCorrector::IMainWindow>
    {
        template <typename D> using type = consume_KeyboardCorrector_IMainWindow<D>;
    };
}
#endif
