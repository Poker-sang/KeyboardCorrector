// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210806.1

#pragma once
#ifndef WINRT_Microsoft_UI_Input_0_H
#define WINRT_Microsoft_UI_Input_0_H
WINRT_EXPORT namespace winrt::Microsoft::UI
{
    struct WindowId;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Dispatching
{
    struct DispatcherQueue;
}
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    struct EventRegistrationToken;
    struct Point;
    struct Rect;
    template <typename TSender, typename TResult> struct __declspec(empty_bases) TypedEventHandler;
}
WINRT_EXPORT namespace winrt::Windows::Foundation::Collections
{
    template <typename T> struct __declspec(empty_bases) IVector;
}
WINRT_EXPORT namespace winrt::Windows::System
{
    enum class VirtualKey : int32_t;
    enum class VirtualKeyModifiers : uint32_t;
}
WINRT_EXPORT namespace winrt::Windows::UI::Core
{
    enum class CoreVirtualKeyStates : uint32_t;
}
WINRT_EXPORT namespace winrt::Microsoft::UI::Input
{
    enum class CrossSlidingState : int32_t
    {
        Started = 0,
        Dragging = 1,
        Selecting = 2,
        SelectSpeedBumping = 3,
        SpeedBumping = 4,
        Rearranging = 5,
        Completed = 6,
    };
    enum class DraggingState : int32_t
    {
        Started = 0,
        Continuing = 1,
        Completed = 2,
    };
    enum class GestureSettings : uint32_t
    {
        None = 0,
        Tap = 0x1,
        DoubleTap = 0x2,
        Hold = 0x4,
        HoldWithMouse = 0x8,
        RightTap = 0x10,
        Drag = 0x20,
        ManipulationTranslateX = 0x40,
        ManipulationTranslateY = 0x80,
        ManipulationTranslateRailsX = 0x100,
        ManipulationTranslateRailsY = 0x200,
        ManipulationRotate = 0x400,
        ManipulationScale = 0x800,
        ManipulationTranslateInertia = 0x1000,
        ManipulationRotateInertia = 0x2000,
        ManipulationScaleInertia = 0x4000,
        CrossSlide = 0x8000,
        ManipulationMultipleFingerPanning = 0x10000,
    };
    enum class HoldingState : int32_t
    {
        Started = 0,
        Completed = 1,
        Canceled = 2,
    };
    enum class InputPointerSourceDeviceKinds : uint32_t
    {
        None = 0,
        Touch = 0x1,
        Pen = 0x2,
        Mouse = 0x4,
    };
    enum class InputSystemCursorShape : int32_t
    {
        Arrow = 0,
        Cross = 1,
        Hand = 3,
        Help = 4,
        IBeam = 5,
        SizeAll = 6,
        SizeNortheastSouthwest = 7,
        SizeNorthSouth = 8,
        SizeNorthwestSoutheast = 9,
        SizeWestEast = 10,
        UniversalNo = 11,
        UpArrow = 12,
        Wait = 13,
        Pin = 14,
        Person = 15,
        AppStarting = 16,
    };
    enum class PointerDeviceType : int32_t
    {
        Touch = 0,
        Pen = 1,
        Mouse = 2,
        Touchpad = 3,
    };
    enum class PointerUpdateKind : int32_t
    {
        Other = 0,
        LeftButtonPressed = 1,
        LeftButtonReleased = 2,
        RightButtonPressed = 3,
        RightButtonReleased = 4,
        MiddleButtonPressed = 5,
        MiddleButtonReleased = 6,
        XButton1Pressed = 7,
        XButton1Released = 8,
        XButton2Pressed = 9,
        XButton2Released = 10,
    };
    struct ICrossSlidingEventArgs;
    struct IDraggingEventArgs;
    struct IGestureRecognizer;
    struct IHoldingEventArgs;
    struct IInputCursor;
    struct IInputCursorFactory;
    struct IInputDesktopResourceCursor;
    struct IInputDesktopResourceCursorStatics;
    struct IInputKeyboardSourceStatics;
    struct IInputLightDismissAction;
    struct IInputLightDismissActionStatics;
    struct IInputLightDismissEventArgs;
    struct IInputObject;
    struct IInputObjectFactory;
    struct IInputPointerSource;
    struct IInputSystemCursor;
    struct IInputSystemCursorStatics;
    struct IManipulationCompletedEventArgs;
    struct IManipulationInertiaStartingEventArgs;
    struct IManipulationStartedEventArgs;
    struct IManipulationUpdatedEventArgs;
    struct IMouseWheelParameters;
    struct IPointerEventArgs;
    struct IPointerPoint;
    struct IPointerPointProperties;
    struct IPointerPointTransform;
    struct IPointerPredictor;
    struct IPointerPredictorStatics;
    struct IRightTappedEventArgs;
    struct ITappedEventArgs;
    struct CrossSlidingEventArgs;
    struct DraggingEventArgs;
    struct GestureRecognizer;
    struct HoldingEventArgs;
    struct InputCursor;
    struct InputDesktopResourceCursor;
    struct InputKeyboardSource;
    struct InputLightDismissAction;
    struct InputLightDismissEventArgs;
    struct InputObject;
    struct InputPointerSource;
    struct InputSystemCursor;
    struct ManipulationCompletedEventArgs;
    struct ManipulationInertiaStartingEventArgs;
    struct ManipulationStartedEventArgs;
    struct ManipulationUpdatedEventArgs;
    struct MouseWheelParameters;
    struct PointerEventArgs;
    struct PointerPoint;
    struct PointerPointProperties;
    struct PointerPredictor;
    struct RightTappedEventArgs;
    struct TappedEventArgs;
    struct CrossSlideThresholds;
    struct ManipulationDelta;
    struct ManipulationVelocities;
}
namespace winrt::impl
{
    template <> struct category<winrt::Microsoft::UI::Input::ICrossSlidingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::IDraggingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::IGestureRecognizer>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::IHoldingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::IInputCursor>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::IInputCursorFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::IInputDesktopResourceCursor>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::IInputDesktopResourceCursorStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::IInputKeyboardSourceStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::IInputLightDismissAction>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::IInputLightDismissActionStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::IInputLightDismissEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::IInputObject>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::IInputObjectFactory>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::IInputPointerSource>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::IInputSystemCursor>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::IInputSystemCursorStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::IManipulationCompletedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::IManipulationInertiaStartingEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::IManipulationStartedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::IManipulationUpdatedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::IMouseWheelParameters>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::IPointerEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::IPointerPoint>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::IPointerPointProperties>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::IPointerPointTransform>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::IPointerPredictor>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::IPointerPredictorStatics>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::IRightTappedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::ITappedEventArgs>{ using type = interface_category; };
    template <> struct category<winrt::Microsoft::UI::Input::CrossSlidingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::DraggingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::GestureRecognizer>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::HoldingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::InputCursor>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::InputDesktopResourceCursor>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::InputKeyboardSource>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::InputLightDismissAction>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::InputLightDismissEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::InputObject>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::InputPointerSource>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::InputSystemCursor>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::ManipulationCompletedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::ManipulationInertiaStartingEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::ManipulationStartedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::ManipulationUpdatedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::MouseWheelParameters>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::PointerEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::PointerPoint>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::PointerPointProperties>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::PointerPredictor>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::RightTappedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::TappedEventArgs>{ using type = class_category; };
    template <> struct category<winrt::Microsoft::UI::Input::CrossSlidingState>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Input::DraggingState>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Input::GestureSettings>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Input::HoldingState>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Input::InputPointerSourceDeviceKinds>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Input::InputSystemCursorShape>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Input::PointerDeviceType>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Input::PointerUpdateKind>{ using type = enum_category; };
    template <> struct category<winrt::Microsoft::UI::Input::CrossSlideThresholds>{ using type = struct_category<float, float, float, float>; };
    template <> struct category<winrt::Microsoft::UI::Input::ManipulationDelta>{ using type = struct_category<winrt::Windows::Foundation::Point, float, float, float>; };
    template <> struct category<winrt::Microsoft::UI::Input::ManipulationVelocities>{ using type = struct_category<winrt::Windows::Foundation::Point, float, float>; };
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::CrossSlidingEventArgs> = L"Microsoft.UI.Input.CrossSlidingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::DraggingEventArgs> = L"Microsoft.UI.Input.DraggingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::GestureRecognizer> = L"Microsoft.UI.Input.GestureRecognizer";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::HoldingEventArgs> = L"Microsoft.UI.Input.HoldingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::InputCursor> = L"Microsoft.UI.Input.InputCursor";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::InputDesktopResourceCursor> = L"Microsoft.UI.Input.InputDesktopResourceCursor";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::InputKeyboardSource> = L"Microsoft.UI.Input.InputKeyboardSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::InputLightDismissAction> = L"Microsoft.UI.Input.InputLightDismissAction";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::InputLightDismissEventArgs> = L"Microsoft.UI.Input.InputLightDismissEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::InputObject> = L"Microsoft.UI.Input.InputObject";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::InputPointerSource> = L"Microsoft.UI.Input.InputPointerSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::InputSystemCursor> = L"Microsoft.UI.Input.InputSystemCursor";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::ManipulationCompletedEventArgs> = L"Microsoft.UI.Input.ManipulationCompletedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::ManipulationInertiaStartingEventArgs> = L"Microsoft.UI.Input.ManipulationInertiaStartingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::ManipulationStartedEventArgs> = L"Microsoft.UI.Input.ManipulationStartedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::ManipulationUpdatedEventArgs> = L"Microsoft.UI.Input.ManipulationUpdatedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::MouseWheelParameters> = L"Microsoft.UI.Input.MouseWheelParameters";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::PointerEventArgs> = L"Microsoft.UI.Input.PointerEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::PointerPoint> = L"Microsoft.UI.Input.PointerPoint";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::PointerPointProperties> = L"Microsoft.UI.Input.PointerPointProperties";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::PointerPredictor> = L"Microsoft.UI.Input.PointerPredictor";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::RightTappedEventArgs> = L"Microsoft.UI.Input.RightTappedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::TappedEventArgs> = L"Microsoft.UI.Input.TappedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::CrossSlidingState> = L"Microsoft.UI.Input.CrossSlidingState";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::DraggingState> = L"Microsoft.UI.Input.DraggingState";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::GestureSettings> = L"Microsoft.UI.Input.GestureSettings";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::HoldingState> = L"Microsoft.UI.Input.HoldingState";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::InputPointerSourceDeviceKinds> = L"Microsoft.UI.Input.InputPointerSourceDeviceKinds";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::InputSystemCursorShape> = L"Microsoft.UI.Input.InputSystemCursorShape";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::PointerDeviceType> = L"Microsoft.UI.Input.PointerDeviceType";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::PointerUpdateKind> = L"Microsoft.UI.Input.PointerUpdateKind";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::CrossSlideThresholds> = L"Microsoft.UI.Input.CrossSlideThresholds";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::ManipulationDelta> = L"Microsoft.UI.Input.ManipulationDelta";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::ManipulationVelocities> = L"Microsoft.UI.Input.ManipulationVelocities";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::ICrossSlidingEventArgs> = L"Microsoft.UI.Input.ICrossSlidingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::IDraggingEventArgs> = L"Microsoft.UI.Input.IDraggingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::IGestureRecognizer> = L"Microsoft.UI.Input.IGestureRecognizer";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::IHoldingEventArgs> = L"Microsoft.UI.Input.IHoldingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::IInputCursor> = L"Microsoft.UI.Input.IInputCursor";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::IInputCursorFactory> = L"Microsoft.UI.Input.IInputCursorFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::IInputDesktopResourceCursor> = L"Microsoft.UI.Input.IInputDesktopResourceCursor";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::IInputDesktopResourceCursorStatics> = L"Microsoft.UI.Input.IInputDesktopResourceCursorStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::IInputKeyboardSourceStatics> = L"Microsoft.UI.Input.IInputKeyboardSourceStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::IInputLightDismissAction> = L"Microsoft.UI.Input.IInputLightDismissAction";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::IInputLightDismissActionStatics> = L"Microsoft.UI.Input.IInputLightDismissActionStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::IInputLightDismissEventArgs> = L"Microsoft.UI.Input.IInputLightDismissEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::IInputObject> = L"Microsoft.UI.Input.IInputObject";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::IInputObjectFactory> = L"Microsoft.UI.Input.IInputObjectFactory";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::IInputPointerSource> = L"Microsoft.UI.Input.IInputPointerSource";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::IInputSystemCursor> = L"Microsoft.UI.Input.IInputSystemCursor";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::IInputSystemCursorStatics> = L"Microsoft.UI.Input.IInputSystemCursorStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::IManipulationCompletedEventArgs> = L"Microsoft.UI.Input.IManipulationCompletedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::IManipulationInertiaStartingEventArgs> = L"Microsoft.UI.Input.IManipulationInertiaStartingEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::IManipulationStartedEventArgs> = L"Microsoft.UI.Input.IManipulationStartedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::IManipulationUpdatedEventArgs> = L"Microsoft.UI.Input.IManipulationUpdatedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::IMouseWheelParameters> = L"Microsoft.UI.Input.IMouseWheelParameters";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::IPointerEventArgs> = L"Microsoft.UI.Input.IPointerEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::IPointerPoint> = L"Microsoft.UI.Input.IPointerPoint";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::IPointerPointProperties> = L"Microsoft.UI.Input.IPointerPointProperties";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::IPointerPointTransform> = L"Microsoft.UI.Input.IPointerPointTransform";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::IPointerPredictor> = L"Microsoft.UI.Input.IPointerPredictor";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::IPointerPredictorStatics> = L"Microsoft.UI.Input.IPointerPredictorStatics";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::IRightTappedEventArgs> = L"Microsoft.UI.Input.IRightTappedEventArgs";
    template <> inline constexpr auto& name_v<winrt::Microsoft::UI::Input::ITappedEventArgs> = L"Microsoft.UI.Input.ITappedEventArgs";
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::ICrossSlidingEventArgs>{ 0x7679641F,0xBA9F,0x543C,{ 0xA7,0xC8,0x62,0x29,0xA9,0x8F,0x89,0xEF } }; // 7679641F-BA9F-543C-A7C8-6229A98F89EF
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::IDraggingEventArgs>{ 0x3EFB1B75,0x3D3B,0x550E,{ 0x96,0x3D,0x08,0x28,0xCA,0x76,0x12,0x8A } }; // 3EFB1B75-3D3B-550E-963D-0828CA76128A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::IGestureRecognizer>{ 0xCDA89AFC,0x6BD0,0x595C,{ 0xBA,0x37,0x54,0x5F,0xCE,0x5B,0xF0,0x16 } }; // CDA89AFC-6BD0-595C-BA37-545FCE5BF016
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::IHoldingEventArgs>{ 0x8E449E85,0xD223,0x533C,{ 0xB0,0xB2,0xBF,0x7C,0x6D,0x10,0xC2,0xDB } }; // 8E449E85-D223-533C-B0B2-BF7C6D10C2DB
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::IInputCursor>{ 0x359B15F9,0x19C2,0x5714,{ 0x84,0x32,0x75,0x17,0x68,0x26,0x40,0x6B } }; // 359B15F9-19C2-5714-8432-75176826406B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::IInputCursorFactory>{ 0x2F47647B,0x4BE0,0x53E9,{ 0xBE,0x7E,0xC3,0x8D,0x54,0x59,0xDB,0x6B } }; // 2F47647B-4BE0-53E9-BE7E-C38D5459DB6B
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::IInputDesktopResourceCursor>{ 0x1DF2777F,0x7C90,0x58FC,{ 0xA7,0xA3,0xD5,0x73,0x6C,0x65,0x10,0xFD } }; // 1DF2777F-7C90-58FC-A7A3-D5736C6510FD
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::IInputDesktopResourceCursorStatics>{ 0xF440DC37,0xA0B6,0x56EB,{ 0xBC,0xEC,0xB0,0x24,0xF2,0x23,0x3D,0x47 } }; // F440DC37-A0B6-56EB-BCEC-B024F2233D47
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::IInputKeyboardSourceStatics>{ 0xF4E1563D,0x8C2E,0x5BCD,{ 0xB7,0x84,0x47,0xAD,0xEA,0xA3,0xCD,0x7E } }; // F4E1563D-8C2E-5BCD-B784-47ADEAA3CD7E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::IInputLightDismissAction>{ 0xE8A39502,0xA860,0x502F,{ 0x8C,0x10,0x36,0x46,0xD4,0x3A,0xEC,0xF1 } }; // E8A39502-A860-502F-8C10-3646D43AECF1
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::IInputLightDismissActionStatics>{ 0xED9B8DEF,0x6496,0x5169,{ 0x98,0x4D,0xD4,0x4B,0x4E,0x69,0x06,0x23 } }; // ED9B8DEF-6496-5169-984D-D44B4E690623
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::IInputLightDismissEventArgs>{ 0x078660EE,0x07CA,0x5808,{ 0xB9,0x82,0xE6,0xE8,0x99,0xCF,0x09,0x8C } }; // 078660EE-07CA-5808-B982-E6E899CF098C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::IInputObject>{ 0x42EDBC88,0xD386,0x544D,{ 0xB1,0xB8,0x68,0x61,0x7F,0xE6,0x82,0x82 } }; // 42EDBC88-D386-544D-B1B8-68617FE68282
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::IInputObjectFactory>{ 0xF7786BC2,0xB0B8,0x5961,{ 0x9A,0x57,0xAE,0x19,0x9D,0x45,0x21,0x06 } }; // F7786BC2-B0B8-5961-9A57-AE199D452106
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::IInputPointerSource>{ 0x6A6C2764,0xC3F4,0x5BE5,{ 0x84,0x47,0xC9,0xA9,0x87,0x66,0xC2,0x40 } }; // 6A6C2764-C3F4-5BE5-8447-C9A98766C240
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::IInputSystemCursor>{ 0x59F538E7,0xC500,0x59AB,{ 0x8B,0x54,0x0B,0xC6,0x10,0x0F,0xD4,0x9E } }; // 59F538E7-C500-59AB-8B54-0BC6100FD49E
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::IInputSystemCursorStatics>{ 0xD3860BB6,0x698A,0x5814,{ 0xAE,0xDD,0xC2,0xFA,0x8B,0xBA,0x5A,0x02 } }; // D3860BB6-698A-5814-AEDD-C2FA8BBA5A02
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::IManipulationCompletedEventArgs>{ 0x0E0249D4,0x46E4,0x5559,{ 0xAE,0xE3,0xFA,0x45,0xCE,0x2A,0x7F,0x56 } }; // 0E0249D4-46E4-5559-AEE3-FA45CE2A7F56
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::IManipulationInertiaStartingEventArgs>{ 0xACF9EF71,0x6E15,0x56AB,{ 0x92,0x60,0xF0,0xD3,0xCE,0x5F,0x66,0xE8 } }; // ACF9EF71-6E15-56AB-9260-F0D3CE5F66E8
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::IManipulationStartedEventArgs>{ 0x4A616613,0xEEF1,0x5F1B,{ 0xA7,0x68,0x07,0x75,0x47,0x8D,0x49,0xD4 } }; // 4A616613-EEF1-5F1B-A768-0775478D49D4
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::IManipulationUpdatedEventArgs>{ 0x406E1961,0x0C98,0x5FC0,{ 0xB3,0xD8,0x11,0x64,0x92,0xEF,0x00,0x53 } }; // 406E1961-0C98-5FC0-B3D8-116492EF0053
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::IMouseWheelParameters>{ 0x6D98BE40,0x1D56,0x51D1,{ 0xAA,0x0D,0xF3,0x25,0x43,0x9C,0xD0,0x09 } }; // 6D98BE40-1D56-51D1-AA0D-F325439CD009
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::IPointerEventArgs>{ 0x865B188C,0x2ED5,0x5DF8,{ 0x82,0x9F,0xAC,0x07,0x01,0xD5,0xC5,0x1A } }; // 865B188C-2ED5-5DF8-829F-AC0701D5C51A
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::IPointerPoint>{ 0x0D430EE6,0x252C,0x59A4,{ 0xB2,0xA2,0xD4,0x42,0x64,0xDC,0x6A,0x40 } }; // 0D430EE6-252C-59A4-B2A2-D44264DC6A40
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::IPointerPointProperties>{ 0xD760ED77,0x4B10,0x57A5,{ 0xB3,0xCC,0xD9,0xBF,0x34,0x13,0xE9,0x96 } }; // D760ED77-4B10-57A5-B3CC-D9BF3413E996
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::IPointerPointTransform>{ 0xDB4791BC,0x994D,0x54C7,{ 0x92,0xEF,0x66,0xEA,0x1D,0xE9,0xB4,0x3C } }; // DB4791BC-994D-54C7-92EF-66EA1DE9B43C
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::IPointerPredictor>{ 0x12C100EC,0x2100,0x565F,{ 0xA6,0x0C,0xF1,0x18,0x7F,0x43,0x88,0x28 } }; // 12C100EC-2100-565F-A60C-F1187F438828
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::IPointerPredictorStatics>{ 0x78A8EF30,0x3E5C,0x55CD,{ 0x8F,0x85,0x65,0xAC,0x09,0xB1,0xA9,0x87 } }; // 78A8EF30-3E5C-55CD-8F85-65AC09B1A987
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::IRightTappedEventArgs>{ 0x8FF73B39,0x887E,0x50A4,{ 0x85,0x00,0x77,0x95,0x30,0x39,0xDC,0xB4 } }; // 8FF73B39-887E-50A4-8500-77953039DCB4
    template <> inline constexpr guid guid_v<winrt::Microsoft::UI::Input::ITappedEventArgs>{ 0xC3A01BB5,0x6076,0x5E0F,{ 0x87,0x1A,0x9D,0x94,0xA6,0xA8,0xF8,0x2B } }; // C3A01BB5-6076-5E0F-871A-9D94A6A8F82B
    template <> struct default_interface<winrt::Microsoft::UI::Input::CrossSlidingEventArgs>{ using type = winrt::Microsoft::UI::Input::ICrossSlidingEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::DraggingEventArgs>{ using type = winrt::Microsoft::UI::Input::IDraggingEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::GestureRecognizer>{ using type = winrt::Microsoft::UI::Input::IGestureRecognizer; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::HoldingEventArgs>{ using type = winrt::Microsoft::UI::Input::IHoldingEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::InputCursor>{ using type = winrt::Microsoft::UI::Input::IInputCursor; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::InputDesktopResourceCursor>{ using type = winrt::Microsoft::UI::Input::IInputDesktopResourceCursor; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::InputLightDismissAction>{ using type = winrt::Microsoft::UI::Input::IInputLightDismissAction; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::InputLightDismissEventArgs>{ using type = winrt::Microsoft::UI::Input::IInputLightDismissEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::InputObject>{ using type = winrt::Microsoft::UI::Input::IInputObject; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::InputPointerSource>{ using type = winrt::Microsoft::UI::Input::IInputPointerSource; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::InputSystemCursor>{ using type = winrt::Microsoft::UI::Input::IInputSystemCursor; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::ManipulationCompletedEventArgs>{ using type = winrt::Microsoft::UI::Input::IManipulationCompletedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::ManipulationInertiaStartingEventArgs>{ using type = winrt::Microsoft::UI::Input::IManipulationInertiaStartingEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::ManipulationStartedEventArgs>{ using type = winrt::Microsoft::UI::Input::IManipulationStartedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::ManipulationUpdatedEventArgs>{ using type = winrt::Microsoft::UI::Input::IManipulationUpdatedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::MouseWheelParameters>{ using type = winrt::Microsoft::UI::Input::IMouseWheelParameters; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::PointerEventArgs>{ using type = winrt::Microsoft::UI::Input::IPointerEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::PointerPoint>{ using type = winrt::Microsoft::UI::Input::IPointerPoint; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::PointerPointProperties>{ using type = winrt::Microsoft::UI::Input::IPointerPointProperties; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::PointerPredictor>{ using type = winrt::Microsoft::UI::Input::IPointerPredictor; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::RightTappedEventArgs>{ using type = winrt::Microsoft::UI::Input::IRightTappedEventArgs; };
    template <> struct default_interface<winrt::Microsoft::UI::Input::TappedEventArgs>{ using type = winrt::Microsoft::UI::Input::ITappedEventArgs; };
    template <> struct abi<winrt::Microsoft::UI::Input::ICrossSlidingEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CrossSlidingState(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_PointerDeviceType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Position(winrt::Windows::Foundation::Point*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::IDraggingEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DraggingState(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_PointerDeviceType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Position(winrt::Windows::Foundation::Point*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::IGestureRecognizer>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_AutoProcessInertia(bool*) noexcept = 0;
            virtual int32_t __stdcall put_AutoProcessInertia(bool) noexcept = 0;
            virtual int32_t __stdcall get_CrossSlideExact(bool*) noexcept = 0;
            virtual int32_t __stdcall put_CrossSlideExact(bool) noexcept = 0;
            virtual int32_t __stdcall get_CrossSlideHorizontally(bool*) noexcept = 0;
            virtual int32_t __stdcall put_CrossSlideHorizontally(bool) noexcept = 0;
            virtual int32_t __stdcall get_CrossSlideThresholds(struct struct_Microsoft_UI_Input_CrossSlideThresholds*) noexcept = 0;
            virtual int32_t __stdcall put_CrossSlideThresholds(struct struct_Microsoft_UI_Input_CrossSlideThresholds) noexcept = 0;
            virtual int32_t __stdcall get_GestureSettings(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall put_GestureSettings(uint32_t) noexcept = 0;
            virtual int32_t __stdcall get_IsActive(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsInertial(bool*) noexcept = 0;
            virtual int32_t __stdcall get_PivotCenter(winrt::Windows::Foundation::Point*) noexcept = 0;
            virtual int32_t __stdcall put_PivotCenter(winrt::Windows::Foundation::Point) noexcept = 0;
            virtual int32_t __stdcall get_PivotRadius(float*) noexcept = 0;
            virtual int32_t __stdcall put_PivotRadius(float) noexcept = 0;
            virtual int32_t __stdcall get_InertiaExpansionDeceleration(float*) noexcept = 0;
            virtual int32_t __stdcall put_InertiaExpansionDeceleration(float) noexcept = 0;
            virtual int32_t __stdcall get_InertiaExpansion(float*) noexcept = 0;
            virtual int32_t __stdcall put_InertiaExpansion(float) noexcept = 0;
            virtual int32_t __stdcall get_InertiaRotationAngle(float*) noexcept = 0;
            virtual int32_t __stdcall put_InertiaRotationAngle(float) noexcept = 0;
            virtual int32_t __stdcall get_InertiaRotationDeceleration(float*) noexcept = 0;
            virtual int32_t __stdcall put_InertiaRotationDeceleration(float) noexcept = 0;
            virtual int32_t __stdcall get_InertiaTranslationDeceleration(float*) noexcept = 0;
            virtual int32_t __stdcall put_InertiaTranslationDeceleration(float) noexcept = 0;
            virtual int32_t __stdcall get_InertiaTranslationDisplacement(float*) noexcept = 0;
            virtual int32_t __stdcall put_InertiaTranslationDisplacement(float) noexcept = 0;
            virtual int32_t __stdcall get_ManipulationExact(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ManipulationExact(bool) noexcept = 0;
            virtual int32_t __stdcall get_MouseWheelParameters(void**) noexcept = 0;
            virtual int32_t __stdcall get_ShowGestureFeedback(bool*) noexcept = 0;
            virtual int32_t __stdcall put_ShowGestureFeedback(bool) noexcept = 0;
            virtual int32_t __stdcall CanBeDoubleTap(void*, bool*) noexcept = 0;
            virtual int32_t __stdcall CompleteGesture() noexcept = 0;
            virtual int32_t __stdcall ProcessDownEvent(void*) noexcept = 0;
            virtual int32_t __stdcall ProcessMoveEvents(void*) noexcept = 0;
            virtual int32_t __stdcall ProcessMouseWheelEvent(void*, bool, bool) noexcept = 0;
            virtual int32_t __stdcall ProcessInertia() noexcept = 0;
            virtual int32_t __stdcall ProcessUpEvent(void*) noexcept = 0;
            virtual int32_t __stdcall add_Tapped(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Tapped(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_RightTapped(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_RightTapped(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Holding(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Holding(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_Dragging(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Dragging(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ManipulationStarted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ManipulationStarted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ManipulationUpdated(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ManipulationUpdated(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ManipulationInertiaStarting(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ManipulationInertiaStarting(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_ManipulationCompleted(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_ManipulationCompleted(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_CrossSliding(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_CrossSliding(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::IHoldingEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_HoldingState(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_PointerDeviceType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Position(winrt::Windows::Foundation::Point*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::IInputCursor>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::IInputCursorFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::IInputDesktopResourceCursor>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ModuleName(void**) noexcept = 0;
            virtual int32_t __stdcall get_ResourceId(uint32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::IInputDesktopResourceCursorStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Create(uint32_t, void**) noexcept = 0;
            virtual int32_t __stdcall CreateFromModule(void*, uint32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::IInputKeyboardSourceStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GetKeyStateForCurrentThread(int32_t, uint32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::IInputLightDismissAction>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall add_Dismissed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_Dismissed(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::IInputLightDismissActionStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall GetForWindowId(struct struct_Microsoft_UI_WindowId, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::IInputLightDismissEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::IInputObject>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_DispatcherQueue(void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::IInputObjectFactory>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::IInputPointerSource>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Cursor(void**) noexcept = 0;
            virtual int32_t __stdcall put_Cursor(void*) noexcept = 0;
            virtual int32_t __stdcall get_DeviceKinds(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall add_PointerCaptureLost(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PointerCaptureLost(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PointerEntered(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PointerEntered(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PointerExited(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PointerExited(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PointerMoved(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PointerMoved(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PointerPressed(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PointerPressed(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PointerReleased(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PointerReleased(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PointerRoutedAway(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PointerRoutedAway(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PointerRoutedReleased(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PointerRoutedReleased(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PointerRoutedTo(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PointerRoutedTo(winrt::event_token) noexcept = 0;
            virtual int32_t __stdcall add_PointerWheelChanged(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_PointerWheelChanged(winrt::event_token) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::IInputSystemCursor>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CursorShape(int32_t*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::IInputSystemCursorStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall Create(int32_t, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::IManipulationCompletedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Cumulative(struct struct_Microsoft_UI_Input_ManipulationDelta*) noexcept = 0;
            virtual int32_t __stdcall get_PointerDeviceType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Position(winrt::Windows::Foundation::Point*) noexcept = 0;
            virtual int32_t __stdcall get_Velocities(struct struct_Microsoft_UI_Input_ManipulationVelocities*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::IManipulationInertiaStartingEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Cumulative(struct struct_Microsoft_UI_Input_ManipulationDelta*) noexcept = 0;
            virtual int32_t __stdcall get_Delta(struct struct_Microsoft_UI_Input_ManipulationDelta*) noexcept = 0;
            virtual int32_t __stdcall get_PointerDeviceType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Position(winrt::Windows::Foundation::Point*) noexcept = 0;
            virtual int32_t __stdcall get_Velocities(struct struct_Microsoft_UI_Input_ManipulationVelocities*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::IManipulationStartedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Cumulative(struct struct_Microsoft_UI_Input_ManipulationDelta*) noexcept = 0;
            virtual int32_t __stdcall get_PointerDeviceType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Position(winrt::Windows::Foundation::Point*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::IManipulationUpdatedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Cumulative(struct struct_Microsoft_UI_Input_ManipulationDelta*) noexcept = 0;
            virtual int32_t __stdcall get_Delta(struct struct_Microsoft_UI_Input_ManipulationDelta*) noexcept = 0;
            virtual int32_t __stdcall get_PointerDeviceType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Position(winrt::Windows::Foundation::Point*) noexcept = 0;
            virtual int32_t __stdcall get_Velocities(struct struct_Microsoft_UI_Input_ManipulationVelocities*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::IMouseWheelParameters>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CharTranslation(winrt::Windows::Foundation::Point*) noexcept = 0;
            virtual int32_t __stdcall put_CharTranslation(winrt::Windows::Foundation::Point) noexcept = 0;
            virtual int32_t __stdcall get_DeltaScale(float*) noexcept = 0;
            virtual int32_t __stdcall put_DeltaScale(float) noexcept = 0;
            virtual int32_t __stdcall get_DeltaRotationAngle(float*) noexcept = 0;
            virtual int32_t __stdcall put_DeltaRotationAngle(float) noexcept = 0;
            virtual int32_t __stdcall get_PageTranslation(winrt::Windows::Foundation::Point*) noexcept = 0;
            virtual int32_t __stdcall put_PageTranslation(winrt::Windows::Foundation::Point) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::IPointerEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_CurrentPoint(void**) noexcept = 0;
            virtual int32_t __stdcall get_Handled(bool*) noexcept = 0;
            virtual int32_t __stdcall put_Handled(bool) noexcept = 0;
            virtual int32_t __stdcall get_KeyModifiers(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall GetIntermediatePoints(void**) noexcept = 0;
            virtual int32_t __stdcall GetIntermediateTransformedPoints(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::IPointerPoint>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_FrameId(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall get_IsInContact(bool*) noexcept = 0;
            virtual int32_t __stdcall get_PointerDeviceType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_PointerId(uint32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Position(winrt::Windows::Foundation::Point*) noexcept = 0;
            virtual int32_t __stdcall get_Properties(void**) noexcept = 0;
            virtual int32_t __stdcall get_Timestamp(uint64_t*) noexcept = 0;
            virtual int32_t __stdcall GetTransformedPoint(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::IPointerPointProperties>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_ContactRect(winrt::Windows::Foundation::Rect*) noexcept = 0;
            virtual int32_t __stdcall get_IsBarrelButtonPressed(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsCanceled(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsEraser(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsHorizontalMouseWheel(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsInRange(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsInverted(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsLeftButtonPressed(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsMiddleButtonPressed(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsPrimary(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsRightButtonPressed(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsXButton1Pressed(bool*) noexcept = 0;
            virtual int32_t __stdcall get_IsXButton2Pressed(bool*) noexcept = 0;
            virtual int32_t __stdcall get_MouseWheelDelta(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Orientation(float*) noexcept = 0;
            virtual int32_t __stdcall get_PointerUpdateKind(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Pressure(float*) noexcept = 0;
            virtual int32_t __stdcall get_TouchConfidence(bool*) noexcept = 0;
            virtual int32_t __stdcall get_Twist(float*) noexcept = 0;
            virtual int32_t __stdcall get_XTilt(float*) noexcept = 0;
            virtual int32_t __stdcall get_YTilt(float*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::IPointerPointTransform>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Inverse(void**) noexcept = 0;
            virtual int32_t __stdcall TryTransform(winrt::Windows::Foundation::Point, winrt::Windows::Foundation::Point*, bool*) noexcept = 0;
            virtual int32_t __stdcall TryTransformBounds(winrt::Windows::Foundation::Rect, winrt::Windows::Foundation::Rect*, bool*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::IPointerPredictor>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PredictionTime(int64_t*) noexcept = 0;
            virtual int32_t __stdcall put_PredictionTime(int64_t) noexcept = 0;
            virtual int32_t __stdcall GetPredictedPoints(void*, uint32_t* __resultSize, void***) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::IPointerPredictorStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall CreateForInputPointerSource(void*, void**) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::IRightTappedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PointerDeviceType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Position(winrt::Windows::Foundation::Point*) noexcept = 0;
        };
    };
    template <> struct abi<winrt::Microsoft::UI::Input::ITappedEventArgs>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_PointerDeviceType(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_Position(winrt::Windows::Foundation::Point*) noexcept = 0;
            virtual int32_t __stdcall get_TapCount(uint32_t*) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_ICrossSlidingEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::CrossSlidingState) CrossSlidingState() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::PointerDeviceType) PointerDeviceType() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) Position() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::ICrossSlidingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_ICrossSlidingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_IDraggingEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::DraggingState) DraggingState() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::PointerDeviceType) PointerDeviceType() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) Position() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::IDraggingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_IDraggingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_IGestureRecognizer
    {
        [[nodiscard]] WINRT_IMPL_AUTO(bool) AutoProcessInertia() const;
        WINRT_IMPL_AUTO(void) AutoProcessInertia(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) CrossSlideExact() const;
        WINRT_IMPL_AUTO(void) CrossSlideExact(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) CrossSlideHorizontally() const;
        WINRT_IMPL_AUTO(void) CrossSlideHorizontally(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::CrossSlideThresholds) CrossSlideThresholds() const;
        WINRT_IMPL_AUTO(void) CrossSlideThresholds(winrt::Microsoft::UI::Input::CrossSlideThresholds const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::GestureSettings) GestureSettings() const;
        WINRT_IMPL_AUTO(void) GestureSettings(winrt::Microsoft::UI::Input::GestureSettings const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsActive() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsInertial() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) PivotCenter() const;
        WINRT_IMPL_AUTO(void) PivotCenter(winrt::Windows::Foundation::Point const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) PivotRadius() const;
        WINRT_IMPL_AUTO(void) PivotRadius(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) InertiaExpansionDeceleration() const;
        WINRT_IMPL_AUTO(void) InertiaExpansionDeceleration(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) InertiaExpansion() const;
        WINRT_IMPL_AUTO(void) InertiaExpansion(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) InertiaRotationAngle() const;
        WINRT_IMPL_AUTO(void) InertiaRotationAngle(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) InertiaRotationDeceleration() const;
        WINRT_IMPL_AUTO(void) InertiaRotationDeceleration(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) InertiaTranslationDeceleration() const;
        WINRT_IMPL_AUTO(void) InertiaTranslationDeceleration(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) InertiaTranslationDisplacement() const;
        WINRT_IMPL_AUTO(void) InertiaTranslationDisplacement(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) ManipulationExact() const;
        WINRT_IMPL_AUTO(void) ManipulationExact(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::MouseWheelParameters) MouseWheelParameters() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) ShowGestureFeedback() const;
        WINRT_IMPL_AUTO(void) ShowGestureFeedback(bool value) const;
        WINRT_IMPL_AUTO(bool) CanBeDoubleTap(winrt::Microsoft::UI::Input::PointerPoint const& value) const;
        WINRT_IMPL_AUTO(void) CompleteGesture() const;
        WINRT_IMPL_AUTO(void) ProcessDownEvent(winrt::Microsoft::UI::Input::PointerPoint const& value) const;
        WINRT_IMPL_AUTO(void) ProcessMoveEvents(param::vector<winrt::Microsoft::UI::Input::PointerPoint> const& value) const;
        WINRT_IMPL_AUTO(void) ProcessMouseWheelEvent(winrt::Microsoft::UI::Input::PointerPoint const& value, bool isShiftKeyDown, bool isControlKeyDown) const;
        WINRT_IMPL_AUTO(void) ProcessInertia() const;
        WINRT_IMPL_AUTO(void) ProcessUpEvent(winrt::Microsoft::UI::Input::PointerPoint const& value) const;
        WINRT_IMPL_AUTO(winrt::event_token) Tapped(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::GestureRecognizer, winrt::Microsoft::UI::Input::TappedEventArgs> const& handler) const;
        using Tapped_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::IGestureRecognizer, &impl::abi_t<winrt::Microsoft::UI::Input::IGestureRecognizer>::remove_Tapped>;
        [[nodiscard]] Tapped_revoker Tapped(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::GestureRecognizer, winrt::Microsoft::UI::Input::TappedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) Tapped(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) RightTapped(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::GestureRecognizer, winrt::Microsoft::UI::Input::RightTappedEventArgs> const& handler) const;
        using RightTapped_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::IGestureRecognizer, &impl::abi_t<winrt::Microsoft::UI::Input::IGestureRecognizer>::remove_RightTapped>;
        [[nodiscard]] RightTapped_revoker RightTapped(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::GestureRecognizer, winrt::Microsoft::UI::Input::RightTappedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) RightTapped(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) Holding(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::GestureRecognizer, winrt::Microsoft::UI::Input::HoldingEventArgs> const& handler) const;
        using Holding_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::IGestureRecognizer, &impl::abi_t<winrt::Microsoft::UI::Input::IGestureRecognizer>::remove_Holding>;
        [[nodiscard]] Holding_revoker Holding(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::GestureRecognizer, winrt::Microsoft::UI::Input::HoldingEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) Holding(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) Dragging(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::GestureRecognizer, winrt::Microsoft::UI::Input::DraggingEventArgs> const& handler) const;
        using Dragging_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::IGestureRecognizer, &impl::abi_t<winrt::Microsoft::UI::Input::IGestureRecognizer>::remove_Dragging>;
        [[nodiscard]] Dragging_revoker Dragging(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::GestureRecognizer, winrt::Microsoft::UI::Input::DraggingEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) Dragging(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) ManipulationStarted(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::GestureRecognizer, winrt::Microsoft::UI::Input::ManipulationStartedEventArgs> const& handler) const;
        using ManipulationStarted_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::IGestureRecognizer, &impl::abi_t<winrt::Microsoft::UI::Input::IGestureRecognizer>::remove_ManipulationStarted>;
        [[nodiscard]] ManipulationStarted_revoker ManipulationStarted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::GestureRecognizer, winrt::Microsoft::UI::Input::ManipulationStartedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) ManipulationStarted(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) ManipulationUpdated(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::GestureRecognizer, winrt::Microsoft::UI::Input::ManipulationUpdatedEventArgs> const& handler) const;
        using ManipulationUpdated_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::IGestureRecognizer, &impl::abi_t<winrt::Microsoft::UI::Input::IGestureRecognizer>::remove_ManipulationUpdated>;
        [[nodiscard]] ManipulationUpdated_revoker ManipulationUpdated(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::GestureRecognizer, winrt::Microsoft::UI::Input::ManipulationUpdatedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) ManipulationUpdated(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) ManipulationInertiaStarting(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::GestureRecognizer, winrt::Microsoft::UI::Input::ManipulationInertiaStartingEventArgs> const& handler) const;
        using ManipulationInertiaStarting_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::IGestureRecognizer, &impl::abi_t<winrt::Microsoft::UI::Input::IGestureRecognizer>::remove_ManipulationInertiaStarting>;
        [[nodiscard]] ManipulationInertiaStarting_revoker ManipulationInertiaStarting(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::GestureRecognizer, winrt::Microsoft::UI::Input::ManipulationInertiaStartingEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) ManipulationInertiaStarting(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) ManipulationCompleted(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::GestureRecognizer, winrt::Microsoft::UI::Input::ManipulationCompletedEventArgs> const& handler) const;
        using ManipulationCompleted_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::IGestureRecognizer, &impl::abi_t<winrt::Microsoft::UI::Input::IGestureRecognizer>::remove_ManipulationCompleted>;
        [[nodiscard]] ManipulationCompleted_revoker ManipulationCompleted(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::GestureRecognizer, winrt::Microsoft::UI::Input::ManipulationCompletedEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) ManipulationCompleted(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) CrossSliding(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::GestureRecognizer, winrt::Microsoft::UI::Input::CrossSlidingEventArgs> const& handler) const;
        using CrossSliding_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::IGestureRecognizer, &impl::abi_t<winrt::Microsoft::UI::Input::IGestureRecognizer>::remove_CrossSliding>;
        [[nodiscard]] CrossSliding_revoker CrossSliding(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::GestureRecognizer, winrt::Microsoft::UI::Input::CrossSlidingEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) CrossSliding(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::IGestureRecognizer>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_IGestureRecognizer<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_IHoldingEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::HoldingState) HoldingState() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::PointerDeviceType) PointerDeviceType() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) Position() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::IHoldingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_IHoldingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_IInputCursor
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Input::IInputCursor>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_IInputCursor<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_IInputCursorFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Input::IInputCursorFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_IInputCursorFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_IInputDesktopResourceCursor
    {
        [[nodiscard]] WINRT_IMPL_AUTO(hstring) ModuleName() const;
        [[nodiscard]] WINRT_IMPL_AUTO(uint32_t) ResourceId() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::IInputDesktopResourceCursor>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_IInputDesktopResourceCursor<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_IInputDesktopResourceCursorStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::InputDesktopResourceCursor) Create(uint32_t resourceId) const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::InputDesktopResourceCursor) CreateFromModule(param::hstring const& moduleName, uint32_t resourceId) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::IInputDesktopResourceCursorStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_IInputDesktopResourceCursorStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_IInputKeyboardSourceStatics
    {
        WINRT_IMPL_AUTO(winrt::Windows::UI::Core::CoreVirtualKeyStates) GetKeyStateForCurrentThread(winrt::Windows::System::VirtualKey const& virtualKey) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::IInputKeyboardSourceStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_IInputKeyboardSourceStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_IInputLightDismissAction
    {
        WINRT_IMPL_AUTO(winrt::event_token) Dismissed(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::InputLightDismissAction, winrt::Microsoft::UI::Input::InputLightDismissEventArgs> const& handler) const;
        using Dismissed_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::IInputLightDismissAction, &impl::abi_t<winrt::Microsoft::UI::Input::IInputLightDismissAction>::remove_Dismissed>;
        [[nodiscard]] Dismissed_revoker Dismissed(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::InputLightDismissAction, winrt::Microsoft::UI::Input::InputLightDismissEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) Dismissed(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::IInputLightDismissAction>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_IInputLightDismissAction<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_IInputLightDismissActionStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::InputLightDismissAction) GetForWindowId(winrt::Microsoft::UI::WindowId const& windowId) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::IInputLightDismissActionStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_IInputLightDismissActionStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_IInputLightDismissEventArgs
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Input::IInputLightDismissEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_IInputLightDismissEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_IInputObject
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Dispatching::DispatcherQueue) DispatcherQueue() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::IInputObject>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_IInputObject<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_IInputObjectFactory
    {
    };
    template <> struct consume<winrt::Microsoft::UI::Input::IInputObjectFactory>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_IInputObjectFactory<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_IInputPointerSource
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::InputCursor) Cursor() const;
        WINRT_IMPL_AUTO(void) Cursor(winrt::Microsoft::UI::Input::InputCursor const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::InputPointerSourceDeviceKinds) DeviceKinds() const;
        WINRT_IMPL_AUTO(winrt::event_token) PointerCaptureLost(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::InputPointerSource, winrt::Microsoft::UI::Input::PointerEventArgs> const& handler) const;
        using PointerCaptureLost_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::IInputPointerSource, &impl::abi_t<winrt::Microsoft::UI::Input::IInputPointerSource>::remove_PointerCaptureLost>;
        [[nodiscard]] PointerCaptureLost_revoker PointerCaptureLost(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::InputPointerSource, winrt::Microsoft::UI::Input::PointerEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) PointerCaptureLost(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) PointerEntered(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::InputPointerSource, winrt::Microsoft::UI::Input::PointerEventArgs> const& handler) const;
        using PointerEntered_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::IInputPointerSource, &impl::abi_t<winrt::Microsoft::UI::Input::IInputPointerSource>::remove_PointerEntered>;
        [[nodiscard]] PointerEntered_revoker PointerEntered(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::InputPointerSource, winrt::Microsoft::UI::Input::PointerEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) PointerEntered(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) PointerExited(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::InputPointerSource, winrt::Microsoft::UI::Input::PointerEventArgs> const& handler) const;
        using PointerExited_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::IInputPointerSource, &impl::abi_t<winrt::Microsoft::UI::Input::IInputPointerSource>::remove_PointerExited>;
        [[nodiscard]] PointerExited_revoker PointerExited(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::InputPointerSource, winrt::Microsoft::UI::Input::PointerEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) PointerExited(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) PointerMoved(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::InputPointerSource, winrt::Microsoft::UI::Input::PointerEventArgs> const& handler) const;
        using PointerMoved_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::IInputPointerSource, &impl::abi_t<winrt::Microsoft::UI::Input::IInputPointerSource>::remove_PointerMoved>;
        [[nodiscard]] PointerMoved_revoker PointerMoved(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::InputPointerSource, winrt::Microsoft::UI::Input::PointerEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) PointerMoved(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) PointerPressed(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::InputPointerSource, winrt::Microsoft::UI::Input::PointerEventArgs> const& handler) const;
        using PointerPressed_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::IInputPointerSource, &impl::abi_t<winrt::Microsoft::UI::Input::IInputPointerSource>::remove_PointerPressed>;
        [[nodiscard]] PointerPressed_revoker PointerPressed(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::InputPointerSource, winrt::Microsoft::UI::Input::PointerEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) PointerPressed(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) PointerReleased(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::InputPointerSource, winrt::Microsoft::UI::Input::PointerEventArgs> const& handler) const;
        using PointerReleased_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::IInputPointerSource, &impl::abi_t<winrt::Microsoft::UI::Input::IInputPointerSource>::remove_PointerReleased>;
        [[nodiscard]] PointerReleased_revoker PointerReleased(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::InputPointerSource, winrt::Microsoft::UI::Input::PointerEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) PointerReleased(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) PointerRoutedAway(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::InputPointerSource, winrt::Microsoft::UI::Input::PointerEventArgs> const& handler) const;
        using PointerRoutedAway_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::IInputPointerSource, &impl::abi_t<winrt::Microsoft::UI::Input::IInputPointerSource>::remove_PointerRoutedAway>;
        [[nodiscard]] PointerRoutedAway_revoker PointerRoutedAway(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::InputPointerSource, winrt::Microsoft::UI::Input::PointerEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) PointerRoutedAway(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) PointerRoutedReleased(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::InputPointerSource, winrt::Microsoft::UI::Input::PointerEventArgs> const& handler) const;
        using PointerRoutedReleased_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::IInputPointerSource, &impl::abi_t<winrt::Microsoft::UI::Input::IInputPointerSource>::remove_PointerRoutedReleased>;
        [[nodiscard]] PointerRoutedReleased_revoker PointerRoutedReleased(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::InputPointerSource, winrt::Microsoft::UI::Input::PointerEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) PointerRoutedReleased(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) PointerRoutedTo(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::InputPointerSource, winrt::Microsoft::UI::Input::PointerEventArgs> const& handler) const;
        using PointerRoutedTo_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::IInputPointerSource, &impl::abi_t<winrt::Microsoft::UI::Input::IInputPointerSource>::remove_PointerRoutedTo>;
        [[nodiscard]] PointerRoutedTo_revoker PointerRoutedTo(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::InputPointerSource, winrt::Microsoft::UI::Input::PointerEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) PointerRoutedTo(winrt::event_token const& token) const noexcept;
        WINRT_IMPL_AUTO(winrt::event_token) PointerWheelChanged(winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::InputPointerSource, winrt::Microsoft::UI::Input::PointerEventArgs> const& handler) const;
        using PointerWheelChanged_revoker = impl::event_revoker<winrt::Microsoft::UI::Input::IInputPointerSource, &impl::abi_t<winrt::Microsoft::UI::Input::IInputPointerSource>::remove_PointerWheelChanged>;
        [[nodiscard]] PointerWheelChanged_revoker PointerWheelChanged(auto_revoke_t, winrt::Windows::Foundation::TypedEventHandler<winrt::Microsoft::UI::Input::InputPointerSource, winrt::Microsoft::UI::Input::PointerEventArgs> const& handler) const;
        WINRT_IMPL_AUTO(void) PointerWheelChanged(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::IInputPointerSource>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_IInputPointerSource<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_IInputSystemCursor
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::InputSystemCursorShape) CursorShape() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::IInputSystemCursor>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_IInputSystemCursor<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_IInputSystemCursorStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::InputSystemCursor) Create(winrt::Microsoft::UI::Input::InputSystemCursorShape const& type) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::IInputSystemCursorStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_IInputSystemCursorStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_IManipulationCompletedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::ManipulationDelta) Cumulative() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::PointerDeviceType) PointerDeviceType() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) Position() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::ManipulationVelocities) Velocities() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::IManipulationCompletedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_IManipulationCompletedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_IManipulationInertiaStartingEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::ManipulationDelta) Cumulative() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::ManipulationDelta) Delta() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::PointerDeviceType) PointerDeviceType() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) Position() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::ManipulationVelocities) Velocities() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::IManipulationInertiaStartingEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_IManipulationInertiaStartingEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_IManipulationStartedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::ManipulationDelta) Cumulative() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::PointerDeviceType) PointerDeviceType() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) Position() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::IManipulationStartedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_IManipulationStartedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_IManipulationUpdatedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::ManipulationDelta) Cumulative() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::ManipulationDelta) Delta() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::PointerDeviceType) PointerDeviceType() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) Position() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::ManipulationVelocities) Velocities() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::IManipulationUpdatedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_IManipulationUpdatedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_IMouseWheelParameters
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) CharTranslation() const;
        WINRT_IMPL_AUTO(void) CharTranslation(winrt::Windows::Foundation::Point const& value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) DeltaScale() const;
        WINRT_IMPL_AUTO(void) DeltaScale(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) DeltaRotationAngle() const;
        WINRT_IMPL_AUTO(void) DeltaRotationAngle(float value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) PageTranslation() const;
        WINRT_IMPL_AUTO(void) PageTranslation(winrt::Windows::Foundation::Point const& value) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::IMouseWheelParameters>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_IMouseWheelParameters<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_IPointerEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::PointerPoint) CurrentPoint() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) Handled() const;
        WINRT_IMPL_AUTO(void) Handled(bool value) const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::System::VirtualKeyModifiers) KeyModifiers() const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Input::PointerPoint>) GetIntermediatePoints() const;
        WINRT_IMPL_AUTO(winrt::Windows::Foundation::Collections::IVector<winrt::Microsoft::UI::Input::PointerPoint>) GetIntermediateTransformedPoints(winrt::Microsoft::UI::Input::IPointerPointTransform const& transform) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::IPointerEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_IPointerEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_IPointerPoint
    {
        [[nodiscard]] WINRT_IMPL_AUTO(uint32_t) FrameId() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsInContact() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::PointerDeviceType) PointerDeviceType() const;
        [[nodiscard]] WINRT_IMPL_AUTO(uint32_t) PointerId() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) Position() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::PointerPointProperties) Properties() const;
        [[nodiscard]] WINRT_IMPL_AUTO(uint64_t) Timestamp() const;
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::PointerPoint) GetTransformedPoint(winrt::Microsoft::UI::Input::IPointerPointTransform const& transform) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::IPointerPoint>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_IPointerPoint<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_IPointerPointProperties
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Rect) ContactRect() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsBarrelButtonPressed() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsCanceled() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsEraser() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsHorizontalMouseWheel() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsInRange() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsInverted() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsLeftButtonPressed() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsMiddleButtonPressed() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsPrimary() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsRightButtonPressed() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsXButton1Pressed() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) IsXButton2Pressed() const;
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) MouseWheelDelta() const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) Orientation() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::PointerUpdateKind) PointerUpdateKind() const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) Pressure() const;
        [[nodiscard]] WINRT_IMPL_AUTO(bool) TouchConfidence() const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) Twist() const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) XTilt() const;
        [[nodiscard]] WINRT_IMPL_AUTO(float) YTilt() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::IPointerPointProperties>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_IPointerPointProperties<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_IPointerPointTransform
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::IPointerPointTransform) Inverse() const;
        WINRT_IMPL_AUTO(bool) TryTransform(winrt::Windows::Foundation::Point const& inPoint, winrt::Windows::Foundation::Point& outPoint) const;
        WINRT_IMPL_AUTO(bool) TryTransformBounds(winrt::Windows::Foundation::Rect const& inRect, winrt::Windows::Foundation::Rect& outRect) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::IPointerPointTransform>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_IPointerPointTransform<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_IPointerPredictor
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::TimeSpan) PredictionTime() const;
        WINRT_IMPL_AUTO(void) PredictionTime(winrt::Windows::Foundation::TimeSpan const& value) const;
        WINRT_IMPL_AUTO(com_array<winrt::Microsoft::UI::Input::PointerPoint>) GetPredictedPoints(winrt::Microsoft::UI::Input::PointerPoint const& point) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::IPointerPredictor>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_IPointerPredictor<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_IPointerPredictorStatics
    {
        WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::PointerPredictor) CreateForInputPointerSource(winrt::Microsoft::UI::Input::InputPointerSource const& inputPointerSource) const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::IPointerPredictorStatics>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_IPointerPredictorStatics<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_IRightTappedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::PointerDeviceType) PointerDeviceType() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) Position() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::IRightTappedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_IRightTappedEventArgs<D>;
    };
    template <typename D>
    struct consume_Microsoft_UI_Input_ITappedEventArgs
    {
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Microsoft::UI::Input::PointerDeviceType) PointerDeviceType() const;
        [[nodiscard]] WINRT_IMPL_AUTO(winrt::Windows::Foundation::Point) Position() const;
        [[nodiscard]] WINRT_IMPL_AUTO(uint32_t) TapCount() const;
    };
    template <> struct consume<winrt::Microsoft::UI::Input::ITappedEventArgs>
    {
        template <typename D> using type = consume_Microsoft_UI_Input_ITappedEventArgs<D>;
    };
    struct struct_Microsoft_UI_Input_CrossSlideThresholds
    {
        float SelectionStart;
        float SpeedBumpStart;
        float SpeedBumpEnd;
        float RearrangeStart;
    };
    template <> struct abi<Microsoft::UI::Input::CrossSlideThresholds>
    {
        using type = struct_Microsoft_UI_Input_CrossSlideThresholds;
    };
    struct struct_Microsoft_UI_Input_ManipulationDelta
    {
        winrt::Windows::Foundation::Point Translation;
        float Scale;
        float Rotation;
        float Expansion;
    };
    template <> struct abi<Microsoft::UI::Input::ManipulationDelta>
    {
        using type = struct_Microsoft_UI_Input_ManipulationDelta;
    };
    struct struct_Microsoft_UI_Input_ManipulationVelocities
    {
        winrt::Windows::Foundation::Point Linear;
        float Angular;
        float Expansion;
    };
    template <> struct abi<Microsoft::UI::Input::ManipulationVelocities>
    {
        using type = struct_Microsoft_UI_Input_ManipulationVelocities;
    };
}
#endif
