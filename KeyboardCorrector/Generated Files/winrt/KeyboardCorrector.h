// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.210806.1

#pragma once
#ifndef WINRT_KeyboardCorrector_H
#define WINRT_KeyboardCorrector_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.210806.1"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.210806.1"
#include "winrt/impl/Microsoft.UI.Xaml.2.h"
#include "winrt/impl/Microsoft.UI.Xaml.Markup.2.h"
#include "winrt/impl/KeyboardCorrector.2.h"
namespace winrt::impl
{
    template <typename D> WINRT_IMPL_AUTO(int32_t) consume_KeyboardCorrector_IMainWindow<D>::MyProperty() const
    {
        int32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::KeyboardCorrector::IMainWindow)->get_MyProperty(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_KeyboardCorrector_IMainWindow<D>::MyProperty(int32_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::KeyboardCorrector::IMainWindow)->put_MyProperty(value));
    }
    template <typename D>
    struct produce<D, winrt::KeyboardCorrector::IMainWindow> : produce_base<D, winrt::KeyboardCorrector::IMainWindow>
    {
        int32_t __stdcall get_MyProperty(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().MyProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MyProperty(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MyProperty(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
    };
}
WINRT_EXPORT namespace winrt::KeyboardCorrector
{
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::KeyboardCorrector::IMainWindow> : winrt::impl::hash_base {};
    template<> struct hash<winrt::KeyboardCorrector::MainWindow> : winrt::impl::hash_base {};
    template<> struct hash<winrt::KeyboardCorrector::XamlMetaDataProvider> : winrt::impl::hash_base {};
#endif
}
#endif
